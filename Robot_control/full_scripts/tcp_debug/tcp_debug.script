def unnamed():
  global _hidden_verificationVariable=0
  step_count_37e3b038_6137_4cfc_a516_716ff8afd3dd = 0.0
  thread Step_Counter_Thread_307ce020_a558_4121_818f_f33555cfdbb7():
    while (True):
      step_count_37e3b038_6137_4cfc_a516_716ff8afd3dd = step_count_37e3b038_6137_4cfc_a516_716ff8afd3dd + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_307ce020_a558_4121_818f_f33555cfdbb7()
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(0.080000, [0.000000, 0.000000, 0.000000], [0.000023, 0.000023, 0.000023, 0.000000, 0.000000, 0.000000])
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(True, 1000000, 2, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_safety_mode_transition_hardness(1)
  global Line_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Line_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Plane_1=p[-0.361487432735338,-0.016717979378191757,0.10394933298158474,0.8032803749589464,-1.48273794275507,-1.3712545351254601]
  global Plane_2=p[-0.4390181010417212,-0.5025363244384129,0.07754186088006663,0.0242452931196319,-0.008431548293163078,-0.5708956925038724]
  global Plane_3=p[-0.25480483753173705,-0.5081372437231373,0.07201538765959875,-9.039930063647936E-5,-1.434349324572951E-4,-0.3090720642039013]
  global Point_3=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global floorgripper=p[-0.2464960731348849,-0.4897452928079739,0.0709944577944641,1.7320762453741406E-4,5.47703051263464E-6,-0.32694642097279897]
  global front_collision=p[-0.4941642762715196,-0.6127463334128198,0.7662532960153384,1.5,4.484756383203096E-16,2.3363997805214006E-16]
  global table=p[-0.8492357722348507,-0.0703668253590126,-0.04045,-2.900828785048298,-1.2031999063950631,-7.106365334326772E-4]
  # begin: URCap Installation Node
  #   Source: OnRobot, 5.9.1, OnRobot A/S
  #   Type: OnRobot Setup
  if (False):
    global vg_Vacuum_A = 0
    global vg_Vacuum_B = 0
  end
  ON_BASE_SHIFT_BOOL = 64
  ON_BASE_SHIFT_INT = 24
  ON_BASE_SHIFT_FLOAT = 26
  ON_DEVICE_SHIFT_BOOL_ARR = [64, 64, 64]
  ON_DEVICE_SHIFT_INT_ARR = [25, 28, 28]
  ON_DEVICE_SHIFT_FLOAT_ARR = [26, 28, 28]
  ON_REGISTERS_SUM_BOOL = 0
  ON_REGISTERS_SUM_INT = 4
  ON_REGISTERS_SUM_FLOAT = 2
  ON_REGISTERS_SPEEDL_INT = 0
  ON_DI_SINGLE = 0
  ON_DI_PRIMARY = 1
  ON_DI_SECONDARY = 2
  ON_DI_DUAL = 3
  on_robot_type = 5
  on_robot_cycle = 2.0
  on_device_ip = "192.168.1.1"
  on_device_socket_port = 51234
  on_xmlrpc = rpc_factory("xmlrpc", "http://192.168.1.1:41414")
  on_RPC = rpc_factory("xmlrpc", "http://127.0.0.1:31416")
  ON_DEBUG_LOG = False
  on_isMetric = True
  on_toolConnector = False
  on_ioqc = False
  on_dual = False
  on_computebox = True
  on_devices = 1
  on_gripper = [False, False, False]
  on_ft = False
  vg_index = 0
  on_gripper[vg_index] = True
  #======    OnRobot Globals    ======#
  
  ON_MATH_PI=3.141593
  ON_ZEROPOSE=p[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZEROFRAME=p[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZERO3D=[0.0,0.0,0.0]
  ON_ZERO6D=[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZERO8D=[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
  ON_FALSE3D=[False,False,False]
  ON_FALSE6D=[False,False,False,False,False,False]
  ON_FALSE8D=[False,False,False,False,False,False,False,False]
  global on_return=0
  on_speedL=ON_ZERO6D
  on_speedBase=ON_ZERO6D
  on_speedVect=ON_ZERO6D
  on_speedExtra=ON_ZERO6D
  on_speedCB=ON_ZERO6D
  on_speedGecko=ON_ZERO6D
  on_RTDE_error=0
  on_dataProcess_thrd=0
  ON_DEVICE_ID_MISSING=0
  ON_INIT_WATCHDOG_HZ=5
  ON_INIT_TIMEOUT=500
  on_robot_TCP_offset=ON_ZEROFRAME
  on_tcp_offset_actual=ON_ZEROFRAME
  on_cog_actual=ON_ZEROFRAME
  on_mass_actual=0.0
  on_robot_mount=[0.0,0.0]
  
  #======    End of OnRobot Globals    ======#
  #======    OnRobot CB Globals    ======#
  
  cb_dataRead_thrd=0
  on_speedCB=ON_ZERO6D
  
  #======    End of OnRobot CB Globals    ======#
  #======    OnRobot VG Globals    ======#
  
  VG_DEVICE_ID_VG10=16
  VG_DEVICE_ID_VGC10=17
  if ON_DEBUG_LOG:
  textmsg("VG Dual: False, Index: ",vg_index)
  if False:
  vg_index=-1
  end 
  end 
  vg_device_id_arr=[0,0,0]
  vg_product_code_arr=[0,0,0]
  vg_Limit_ma_arr=[0,0,0]
  vg_Vacuum_A_arr=[0,0,0]
  vg_Vacuum_B_arr=[0,0,0]
  vg_Vacuum_AB_arr=[0,0,0,0,0,0]
  vg_mass_A_arr=[0,0,0]
  vg_mass_B_arr=[0,0,0]
  
  vg_Vacuum_A=0
  vg_Vacuum_B=0
  def get_vg_Vacuum_A():
  return vg_Vacuum_A
  end 
  def get_vg_Vacuum_B():
  return vg_Vacuum_B
  end 
  
  vg_vacuum_guard_arr=[False,False,False,False,False,False]
  vg_enabled_arr=[False,False,False]
  vg_glob_time=0.0
  vg_step_time=on_robot_cycle/1000.0
  
  #======    End of OnRobot VG Globals    ======#
  #======    OnRobot Interface Messages    ======#
  
  on_devices_primary_log="OnRobot Devices"
  on_devices_secondary_log="OnRobot Secondary Device"
  on_device_error_title="OnRobot - Device error"
  on_install_error="OnRobot Setup is not correct.<br>Check the status in the OnRobot Setup page in the Installation Tab.<br>Program halted."
  on_device_missing="No device connected.<br>Program halted."
  ft_device_missing="No OnRobot F/T sensor connected.<br>Program halted."
  cb_device_missing="No OnRobot F/T device connected.<br>Program halted."
  hex_device_missing="No HEX Sensor connected.<br>Program halted."
  rg2ft_device_missing="No RG2-FT gripper connected.<br>Program halted."
  rg_device_missing="No RG gripper connected.<br>Program halted."
  vg_device_missing="No VG gripper connected.<br>Program halted."
  gg_device_missing="No Gecko Gripper connected.<br>Program halted."
  sg_device_missing="No Soft Gripper connected.<br>Program halted."
  tfg_device_missing="No 3FG gripper connected.<br>Program halted."
  sdr_device_missing="No OnRobot Sander connected.<br>Program halted."
  twofg_device_missing="No 2FG gripper connected.<br>Program halted."
  vgp_device_missing="No VGP gripper connected.<br>Program halted."
  mg_device_missing="No Magnetic Gripper connected.<br>Program halted."
  on_xmlrpc_start_ip="Connecting to OnRobot XML-RPC Server:"
  on_java_comm_error_textmsg_title="OnRobot - Communication error:"
  on_java_comm_controlsocket_open_error="Socket 'javaSocket' opening was unsuccessful."
  on_java_comm_error_title="OnRobot - Communication error"
  on_java_comm_socket_open_error="Establishing connection with the URCap was timed out.<br>Check the status in the OnRobot Setup page in the Installation Tab.<br>Program halted."
  on_rtde_feed_error_textmsg_title="OnRobot - RTDE error:"
  on_rtde_feed_error="RTDE feed error. OnRobot device count mismatch.<br>Program halted."
  on_rtde_feed_open_error_textmsg="Socket 'rtdeFeed' opening was unsuccessful."
  on_rtde_feed_error_title="OnRobot - RTDE error"
  on_rtde_feed_count_error="Invalid RTDE offset setup detected. Please check RTDE Offsets at the OnRobot Setup page in the Installation Tab.<br>Program halted."
  on_rtde_feed_open_error="Establishing connection with the devices was timed out.<br>Ensure that the OnRobot devices are operational, and check the status in the OnRobot Setup page in the Installation Tab."
  
  #======    End of OnRobot Interface Messages    ======#
  #======    OnRobot Interface    ======#
  
  on_portopened_javaSocket=False
  on_rtde_feed_opened=False
  on_dataProcess_running=False
  def on_missing():
  popup(on_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def ft_missing():
  popup(ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def cb_missing():
  popup(ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def hex_missing():
  popup(hex_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def rg2ft_missing():
  popup(rg2ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def rg_missing():
  popup(rg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def vg_missing():
  popup(vg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def gg_missing():
  popup(gg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def sg_missing():
  popup(sg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def tfg_missing():
  popup(tfg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def sdr_missing():
  popup(sdr_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def twofg_missing():
  popup(twofg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def vgp_missing():
  popup(vgp_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def mg_missing():
  popup(mg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def on_portclose_javaSocket():
  socket_close("javaSocket")
  on_portopened_javaSocket=False
  end 
  def on_portopen_javaSocket():
  on_portclose_javaSocket()
  on_portopened_javaSocket=socket_open("127.0.0.1",44005,"javaSocket")
  if not on_portopened_javaSocket:
  textmsg(on_java_comm_error_textmsg_title,on_java_comm_controlsocket_open_error)
  popup(on_java_comm_socket_open_error,title=on_java_comm_error_title,error=True,blocking=False)
  halt
  end 
  end 
  def on_rtde_feed_close():
  socket_close("rtdeFeed")
  on_rtde_feed_opened=False
  end 
  def on_rtde_feed_open():
  on_rtde_feed_close()
  if((ON_BASE_SHIFT_BOOL+ON_REGISTERS_SUM_BOOL)>128)or((ON_BASE_SHIFT_INT+ON_REGISTERS_SUM_INT)>48)or((ON_BASE_SHIFT_FLOAT+ON_REGISTERS_SUM_FLOAT)>48):
  popup(on_rtde_feed_count_error,title=on_rtde_feed_error_title,error=True,blocking=False)
  halt
  end 
  on_rtde_feed_opened=socket_open(on_device_ip,on_device_socket_port,"rtdeFeed")
  if not on_rtde_feed_opened:
  on_rtde_feed_opened=socket_open(on_device_ip,on_device_socket_port,"rtdeFeed")
  end 
  if not on_rtde_feed_opened:
  textmsg(on_rtde_feed_error_textmsg_title,on_rtde_feed_open_error_textmsg)
  popup(on_rtde_feed_open_error,title=on_rtde_feed_error_title,error=True,blocking=False)
  halt
  end 
  socket_send_int(ON_BASE_SHIFT_BOOL,"rtdeFeed")
  socket_send_int(ON_REGISTERS_SUM_BOOL,"rtdeFeed")
  socket_send_int(ON_BASE_SHIFT_INT,"rtdeFeed")
  socket_send_int(ON_REGISTERS_SUM_INT,"rtdeFeed")
  socket_send_int(ON_BASE_SHIFT_FLOAT,"rtdeFeed")
  socket_send_int(ON_REGISTERS_SUM_FLOAT,"rtdeFeed")
  socket_send_int(ON_REGISTERS_SPEEDL_INT,"rtdeFeed")
  end 
  def on_dataRead():
  enter_critical
  on_RTDE_error=read_input_integer_register(ON_BASE_SHIFT_INT)
  exit_critical
  end 
  def on_set_rtde_watchdog(updateHz=ON_INIT_WATCHDOG_HZ):
  if(on_devices>0):
  watchdog_int_reg_str=str_cat("input_int_register_",ON_BASE_SHIFT_INT)
  rtde_set_watchdog(watchdog_int_reg_str,updateHz,"stop")
  if ON_DEBUG_LOG:
  local update_str=str_cat(" watchdog set to [Hz]: ",updateHz)
  textmsg(watchdog_int_reg_str,update_str)
  end 
  end 
  end 
  def on_speedCB_get():
  return[on_speedCB[0],on_speedCB[1],on_speedCB[2],on_speedCB[3],on_speedCB[4],on_speedCB[5]]
  end 
  def on_speedGecko_get():
  local speedExtra=ON_ZERO6D
  if on_speedl_for_gecko:
  speedExtra=[on_speedGecko[0],on_speedGecko[1],on_speedGecko[2],on_speedGecko[3],on_speedGecko[4],on_speedGecko[5]]
  end 
  return speedExtra
  end 
  def on_speedGecko_set(speedGecko):
  on_speedGecko=[speedGecko[0],speedGecko[1],speedGecko[2],speedGecko[3],speedGecko[4],speedGecko[5]]
  end 
  thread on_dataProcess_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting on_dataRead thread")
  end 
  local error=False
  on_dataProcess_running=True
  sync()
  while on_dataProcess_running:
  sync()
  on_dataRead()
  error=on_error((on_RTDE_error<0),on_rtde_feed_error,on_rtde_feed_error_title,False)
  on_dataProcess_running=not error
  end 
  if error:
  halt
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping on_dataRead thread")
  end 
  end 
  thread on_set_watchdog_thread():
  sleep(1)
  on_set_rtde_watchdog(updateHz=ON_INIT_WATCHDOG_HZ)
  sleep(1/ON_INIT_WATCHDOG_HZ)
  on_dataProcess_running=False
  kill on_dataProcess_thrd
  end 
  
  #======    End of OnRobot Interface    ======#
  #======    OnRobot QC Setup Tool Connector    ======#
  
  def tc_setup_tool():
  if ON_DEBUG_LOG:
  textmsg("QC Setup Tool Connector start...")
  end 
  set_tool_voltage(24)
  
  set_tool_communication(True,1000000,2,1,1.5,3.5)
  
  if ON_DEBUG_LOG:
  textmsg("QC Setup Tool Connector end.")
  end 
  end 
  
  #======    End of OnRobot QC Setup Tool Connector    ======#
  
  #======    End of OnRobot CB Interface Messages    ======#
  #======    OnRobot CB Interface    ======#
  
  cb_dataRead_running=False
  def cb_dataRead():
  enter_critical
  local axis=0
  while(axis<6):
  on_speedCB[axis]=read_input_float_register(ON_BASE_SHIFT_FLOAT+axis)
  axis=axis+1
  end 
  exit_critical
  end 
  thread cb_dataRead_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting cb_dataRead thread")
  end 
  cb_dataRead_running=True
  sync()
  while cb_dataRead_running:
  sync()
  cb_dataRead()
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping cb_dataRead thread")
  end 
  end 
  
  #======    End of OnRobot CB Interface    ======#
  
  #======    End of OnRobot VG Messages    ======#
  #======    OnRobot VG Interface    ======#
  
  vg_dataRead_running=False
  def vg_dataRead_RTDE(tool_index):
  local reg_offset_bool=ON_DEVICE_SHIFT_BOOL_ARR[tool_index]
  local reg_offset_int=ON_DEVICE_SHIFT_INT_ARR[tool_index]
  local reg_offset_float=ON_DEVICE_SHIFT_FLOAT_ARR[tool_index]
  enter_critical
  floatRegDummy=read_input_float_register(reg_offset_float+0)
  vg_Vacuum_A_arr[tool_index]=floatRegDummy
  floatRegDummy=read_input_float_register(reg_offset_float+1)
  vg_Vacuum_B_arr[tool_index]=floatRegDummy
  intRegDummy=read_input_integer_register(reg_offset_int+0)
  vg_device_id_arr[tool_index]=intRegDummy
  intRegDummy=read_input_integer_register(reg_offset_int+1)
  vg_product_code_arr[tool_index]=intRegDummy
  intRegDummy=read_input_integer_register(reg_offset_int+2)
  vg_Limit_ma_arr[tool_index]=intRegDummy
  exit_critical
  end 
  thread vg_dataRead_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting vg_dataRead thread")
  end 
  while vg_dataRead_running:
  sync()
  if(vg_index==ON_DI_DUAL):
  vg_dataRead_RTDE(ON_DI_PRIMARY)
  vg_dataRead_RTDE(ON_DI_SECONDARY)
  else:
  vg_dataRead_RTDE(vg_index)
  end 
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping vg_dataRead thread")
  end 
  end 
  
  #======    End of OnRobot VG Interface    ======#
  #======    OnRobot TCP Messages    ======#
  
  on_tcp_log_msg_default="OnRobot: Robot TCP Offset set to:"
  on_tcp_log_msg_primary="OnRobot: Robot TCP Offset set to Primary:"
  on_tcp_log_msg_secondary="OnRobot: Robot TCP Offset set to Secondary:"
  
  #======    End of OnRobot TCP Messages    ======#
  #======    OnRobot TCP    ======#
  
  on_tcp_offset_actual=ON_ZEROFRAME
  on_tcp_offset_primary=ON_ZEROFRAME
  on_tcp_static_primary=ON_ZEROFRAME
  on_tcp_dynamic_primary=ON_ZEROFRAME
  on_tcp_vision_primary=ON_ZEROFRAME
  on_tcp_qc_primary=ON_ZEROFRAME
  on_tcp_base_primary=ON_ZEROFRAME
  on_tcp_gripper_static_primary=ON_ZEROFRAME
  on_tcp_tool_primary=ON_ZEROFRAME
  on_tcp_gripper_dynamic_primary=ON_ZEROFRAME
  on_tcp_gripper_primary=ON_ZEROFRAME
  on_tcp_offset_secondary=ON_ZEROFRAME
  on_tcp_static_secondary=ON_ZEROFRAME
  on_tcp_dynamic_secondary=ON_ZEROFRAME
  on_tcp_vision_secondary=ON_ZEROFRAME
  on_tcp_qc_secondary=ON_ZEROFRAME
  on_tcp_base_secondary=ON_ZEROFRAME
  on_tcp_gripper_static_secondary=ON_ZEROFRAME
  on_tcp_tool_secondary=ON_ZEROFRAME
  on_tcp_gripper_dynamic_secondary=ON_ZEROFRAME
  on_tcp_gripper_secondary=ON_ZEROFRAME
  def on_tcp_update_primary():
  if ON_DEBUG_LOG:
  textmsg("TCP Update Primary start..")
  end 
  on_tcp_gripper_dynamic_primary=p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  enter_critical
  on_tcp_dynamic_primary=pose_trans(on_tcp_static_primary,on_tcp_gripper_dynamic_primary)
  on_tcp_offset_primary=pose_trans(on_tcp_dynamic_primary,on_tcp_tool_primary)
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("TCP Update Primary end.")
  end 
  end 
  def on_tcp_init_primary():
  if ON_DEBUG_LOG:
  textmsg("TCP Init Primary start..")
  end 
  enter_critical
  on_tcp_base_primary=pose_trans(on_tcp_vision_primary,on_tcp_qc_primary)
  on_tcp_static_primary=pose_trans(on_tcp_base_primary,on_tcp_gripper_static_primary)
  exit_critical
  on_tcp_update_primary()
  if ON_DEBUG_LOG:
  textmsg("TCP Init Primary end.")
  end 
  end 
  def on_tcp_offset_set(TCP_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Offset set started!")
  end 
  on_tcp_offset_send(TCP_offset)
  if(on_follow_tcp):
  set_tcp(TCP_offset)
  end 
  on_robot_TCP_offset=TCP_offset
  if ON_DEBUG_LOG:
  textmsg("TCP Offset set to: ",on_robot_TCP_offset)
  end 
  end 
  def on_tcp_offset_forced_set_actual(isPrimary=True):
  if(not on_follow_tcp):
  
  local tcp_log_msg=on_tcp_log_msg_default
  
  textmsg(tcp_log_msg,on_tcp_offset_actual)
  set_tcp(on_tcp_offset_actual)
  end 
  end 
  def on_tcp_update(isPrimary=True):
  on_tcp_update_primary()
  
  on_tcp_set_actual_to(isPrimary)
  end 
  def on_tcp_set_actual_to(isPrimary=True):
  
  on_tcp_offset_actual=on_tcp_offset_primary
  if(on_follow_tcp):
  textmsg(on_tcp_log_msg_default,on_tcp_offset_actual)
  end 
  
  on_tcp_active_is_primary=isPrimary
  on_tcp_offset_set(on_tcp_offset_actual)
  end 
  def on_tcp_update_tool_primary(tool_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool Primary start..")
  end 
  on_tcp_tool_primary=tool_offset
  on_tcp_update_primary()
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool Primary end.")
  end 
  end 
  def on_tcp_tool_rpy_get(xyz=[0.0,0.0,0.0],rpy=[0.0,0.0,0.0]):
  local rotvec=rpy2rotvec(rpy)
  local tool_offset=p[xyz[0],xyz[1],xyz[2],rotvec[0],rotvec[1],rotvec[2]]
  return tool_offset
  end 
  
  def on_tcp_update_tool(tool_offset,tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool start..")
  end 
  if(tool_index!=ON_DI_SECONDARY):
  on_tcp_update_tool_primary(tool_offset)
  local isPrimary=True
  
  end 
  on_tcp_set_actual_to(isPrimary)
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool end.")
  end 
  end 
  def on_get_tcp_for(tool_index):
  if tool_index==ON_DI_SECONDARY:
  local actual_tcp=on_tcp_static_secondary
  else:
  local actual_tcp=on_tcp_static_primary
  end 
  return actual_tcp
  end 
  
  #======    End of OnRobot TCP    ======#
  #======    OnRobot Payload Messages    ======#
  
  on_mass_log_msg="OnRobot: Robot Payload Mass set to:"
  on_cog_log_msg="OnRobot: Robot Payload Center of Gravity set to:"
  
  #======    End of OnRobot Payload Messages    ======#
  #======    OnRobot Payload    ======#
  
  on_cog_actual=ON_ZEROFRAME
  on_mass_actual=0.0
  on_cog_primary=ON_ZEROFRAME
  on_cog_L1L2_primary=ON_ZEROFRAME
  on_mass_primary=0.0
  on_mass_L1L2_primary=0.0
  on_cog_vision_primary=ON_ZEROFRAME
  on_cog_qc_primary=ON_ZEROFRAME
  on_cog_base_primary=ON_ZEROFRAME
  on_cog_gripper_primary=ON_ZEROFRAME
  on_cog_tool_primary=ON_ZEROFRAME
  on_mass_vision_primary=0.0
  on_mass_qc_primary=0.0
  on_mass_base_primary=0.0
  on_mass_gripper_primary=0.0
  on_mass_tool_primary=0.0
  on_cog_secondary=ON_ZEROFRAME
  on_mass_secondary=0.0
  on_cog_gripper_secondary=ON_ZEROFRAME
  on_mass_gripper_secondary=0.0
  on_cog_tool_secondary=ON_ZEROFRAME
  on_mass_tool_secondary=0.0
  ON_LB2KG001=0.45359237/100
  def on_payload_update_primary():
  if ON_DEBUG_LOG:
  textmsg("Payload Update Primary start..")
  end 
  enter_critical
  on_mass_primary=on_mass_L1L2_primary+on_mass_tool_primary
  local massL1L2L3Ratio=on_mass_tool_primary/on_mass_primary
  local toolAbsCOG=pose_trans(on_tcp_dynamic_primary,on_cog_tool_primary)
  toolAbsCOG=p[toolAbsCOG[0],toolAbsCOG[1],toolAbsCOG[2],0.0,0.0,0.0]
  on_cog_primary=interpolate_pose(on_cog_L1L2_primary,toolAbsCOG,massL1L2L3Ratio)
  on_cog_primary=p[on_cog_primary[0],on_cog_primary[1],on_cog_primary[2],0.0,0.0,0.0]
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("Payload Update Primary end.")
  end 
  end 
  def on_payload_init_primary():
  if ON_DEBUG_LOG:
  textmsg("Payload Init Primary start..")
  end 
  enter_critical
  on_mass_base_primary=on_mass_vision_primary+on_mass_qc_primary
  local massL0L1Ratio=on_mass_qc_primary/on_mass_base_primary
  on_mass_L1L2_primary=on_mass_base_primary+on_mass_gripper_primary
  local massL1L2Ratio=on_mass_gripper_primary/on_mass_L1L2_primary
  local qcAbsCOG=pose_trans(on_tcp_vision_primary,on_cog_qc_primary)
  qcAbsCOG=p[qcAbsCOG[0],qcAbsCOG[1],qcAbsCOG[2],0.0,0.0,0.0]
  on_cog_base_primary=interpolate_pose(on_cog_vision_primary,qcAbsCOG,massL0L1Ratio)
  on_cog_base_primary=p[on_cog_base_primary[0],on_cog_base_primary[1],on_cog_base_primary[2],0.0,0.0,0.0]
  local gripperAbsCOG=pose_trans(on_tcp_base_primary,on_cog_gripper_primary)
  gripperAbsCOG=p[gripperAbsCOG[0],gripperAbsCOG[1],gripperAbsCOG[2],0.0,0.0,0.0]
  on_cog_L1L2_primary=interpolate_pose(on_cog_base_primary,gripperAbsCOG,massL1L2Ratio)
  on_cog_L1L2_primary=p[on_cog_L1L2_primary[0],on_cog_L1L2_primary[1],on_cog_L1L2_primary[2],0.0,0.0,0.0]
  exit_critical
  on_payload_update_primary()
  if ON_DEBUG_LOG:
  textmsg("Payload Init Primary end.")
  end 
  end 
  def on_payload_update():
  on_payload_update_primary()
  
  on_mass_actual =on_mass_primary
  on_cog_actual=on_cog_primary
  
  on_payload_set_actual()
  end 
  def on_payload_set_actual():
  
  on_mass_actual =on_mass_primary
  on_cog_actual=on_cog_primary
  
  local CoG=[on_cog_actual[0],on_cog_actual[1],on_cog_actual[2]]
  on_payload_set(on_mass_actual,CoG)
  end 
  def on_payload_update_tool_primary(tool_mass=0,tool_cog=[0.0,0.0,0.0]):
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool Primary start..")
  end 
  on_cog_tool_primary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_primary=tool_mass
  on_payload_update_primary()
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool Primary end.")
  end 
  end 
  def on_payload_set(mass,CoG):
  if ON_DEBUG_LOG:
  textmsg("Payload set started!")
  end 
  local center_of_gravity=[CoG[0],CoG[1],CoG[2]]
  on_payload_send(center_of_gravity,mass)
  if(on_isMetric):
  local roundedMass=floor(mass*100+0.5)/100
  else:
  local roundedMass=floor(mass/ON_LB2KG001+0.5)*ON_LB2KG001
  end 
  set_payload(roundedMass,center_of_gravity)
  on_mass_actual=roundedMass
  on_cog_actual=p[CoG[0],CoG[1],CoG[2],0.0,0.0,0.0]
  if ON_DEBUG_LOG:
  textmsg("Payload mass, CoG set to: ",str_cat(str_cat(mass,", "),CoG))
  end 
  end 
  
  def on_payload_update_secondary():
  end 
  def on_payload_init_secondary():
  end 
  
  def on_payload_update_tool(tool_mass,tool_cog=[0.0,0.0,0.0],tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool start..")
  end 
  if(tool_index!=ON_DI_SECONDARY):
  on_cog_tool_primary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_primary=tool_mass
  else:
  on_cog_tool_secondary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_secondary=tool_mass
  end 
  on_payload_update()
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool end.")
  end 
  end 
  def on_payload_get_cog2tcp_tool(tool_index=0):
  if(tool_index!=ON_DI_SECONDARY):
  local cog_tool=[on_tcp_tool_primary[0],on_tcp_tool_primary[1],on_tcp_tool_primary[2]]
  else:
  local cog_tool=[on_tcp_tool_secondary[0],on_tcp_tool_secondary[1],on_tcp_tool_secondary[2]]
  end 
  return cog_tool
  end 
  
  #======    End of OnRobot Payload    ======#
  #======    OnRobot QC TCP    ======#
  
  onrobotmini=0
  
  
  
  #======    End of OnRobot QC TCP    ======#
  #======    OnRobot FT TCP    ======#
  
  def on_tcp_offset_send(TCP_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Offset sending started!")
  end 
  local offset=[TCP_offset[0]*1000.0,TCP_offset[1]*1000.0,TCP_offset[2]*1000.0,TCP_offset[3],TCP_offset[4],TCP_offset[5]]
  on_xmlrpc.cb_tcp(offset)
  on_robot_TCP_offset=TCP_offset
  if ON_DEBUG_LOG:
  textmsg("TCP Offset sent.")
  end 
  end 
  def on_payload_send(CoG,mass):
  if ON_DEBUG_LOG:
  textmsg("Payload sending started!")
  end 
  local center_of_gravity=[CoG[0]*1000.0,CoG[1]*1000.0,CoG[2]*1000.0]
  local mount=[on_robot_mount[0]*1000.0,on_robot_mount[1]*1000.0]
  
  on_robot_payload_cog=CoG
  on_robot_payload_mass=mass
  if ON_DEBUG_LOG:
  textmsg("Payload sent.")
  end 
  end 
  def cb_get_pose_as_array_mm(pose):
  return[1000.0*pose[0],1000.0*pose[1],1000.0*pose[2],pose[3],pose[4],pose[5]]
  end
  
  #======    End of OnRobot FT TCP    ======#
  #======    OnRobot VG TCP    ======#
  
  def vg_payload_set(mass,channel,tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("VG Payload mass command starting..")
  end 
  if(channel==0):
  vg_mass_A_arr[tool_index]=mass
  elif(channel==1):
  vg_mass_B_arr[tool_index]=mass
  else:
  vg_mass_A_arr[tool_index]=mass/2
  vg_mass_B_arr[tool_index]=mass/2
  end 
  if(tool_index==ON_DI_SECONDARY):
  local cogTool=[on_cog_tool_secondary[0],on_cog_tool_secondary[1],on_cog_tool_secondary[2]]
  else:
  local cogTool=[on_cog_tool_primary[0],on_cog_tool_primary[1],on_cog_tool_primary[2]]
  end
  local massTool=(vg_mass_A_arr[tool_index]+vg_mass_B_arr[tool_index])
  on_payload_update_tool(massTool,cogTool,tool_index)
  if ON_DEBUG_LOG:
  textmsg("VG Payload mass command ended.")
  end 
  end 
  
  #======    End of OnRobot VG TCP    ======#
  #======    OnRobot  Speedl    ======#
  
  on_speedl_thread_handler=0
  on_speedl_is_enabled=False
  on_speedl_is_running=False
  on_speedl_acc=0.0
  ft_speedl_hg_caranteen_reached=False
  ft_speedl_hg_caranteen_safemode=False
  on_speedl_for_ftcontrol=False
  on_speedl_for_move=False
  on_speedl_for_handguide=False
  on_speedl_for_insertpart=False
  on_speedl_for_depthcompensation=False
  on_speedl_for_center=False
  on_speedl_for_gecko=False
  on_speedl_acc=10000.0 
  on_speedl_acc_to_zero=3.0 
  ON_SPEEDL_FTCONTROL=1
  ON_SPEEDL_HANDGUIDE=2
  ON_SPEEDL_TRAJECTORY=3
  ON_SPEEDL_MOVE=ON_SPEEDL_TRAJECTORY
  ON_SPEEDL_INSERTPART=4
  ON_SPEEDL_DEPTHCOMP=5
  ON_SPEEDL_CENTER=6
  ON_SPEEDL_GECKO=7
  def on_wait_ms(time_ms):
  local sync_time=ceil(norm(time_ms/2.0))
  while(sync_time>0):
  sync_time=sync_time-1
  sync()
  end
  end 
  def on_error(status_flag,message,title,stop_var=False):
  if(status_flag):
  popup(message,title=title,error=True,blocking=False)
  stop_var=True
  end 
  return stop_var
  end 
  def on_warning(status_flag,message,title,isPopupNeeded=False,is_shown=False):
  if(status_flag):
  if(not is_shown):
  if(isPopupNeeded):
  popup(message,title=title,warning=True,blocking=False)
  else:
  textmsg(title+": ",message)
  end 
  is_shown=True
  end 
  else:
  is_shown=False
  end 
  return is_shown
  end 
  def on_speedl_add_extra(speedBase,speedExtra):
  speedSum=ON_ZERO6D
  speedBaseP=p[speedBase[0],speedBase[1],speedBase[2],speedBase[3],speedBase[4],speedBase[5]]
  speedExtraP=p[speedExtra[0],speedExtra[1],speedExtra[2],speedExtra[3],speedExtra[4],speedExtra[5]]
  speedSumP=pose_add(speedExtraP,speedBaseP)
  speedSum=[speedSumP[0],speedSumP[1],speedSumP[2],speedSumP[3],speedSumP[4],speedSumP[5]]
  return speedSum
  end 
  
  thread on_speedl_thread():
  if ON_DEBUG_LOG:
  textmsg("Speedl thread started..")
  end 
  enter_critical
  on_speedl_is_running=True
  on_speedl_is_enabled=True
  exit_critical
  on_speedL=ON_ZERO6D
  on_speedL_last=ON_ZERO6D
  
  while on_speedl_is_running:
  on_speedBase=on_speedCB_get()
  on_speedL=on_speedBase
  
  
  if on_speedl_is_enabled:
  if(on_speedL==ON_ZERO6D):
  on_speedL=[on_speedL_last[0]/100,on_speedL_last[1]/100,on_speedL_last[2]/100,on_speedL_last[3]/100,on_speedL_last[4]/100,on_speedL_last[5]/100]
  end
  speedl(on_speedL,a=on_speedl_acc,t=0.001)
  else:
  speedl(ON_ZERO6D,a=on_speedl_acc_to_zero,t=0.001)
  end 
  on_speedL_last=on_speedL
  end 
  
  on_speedL=ON_ZERO6D
  if ON_DEBUG_LOG:
  textmsg("Speedl thread ended.")
  end 
  end 
  def on_speedl_integer_get():
  local speedl_integer=binary_list_to_integer([on_speedl_for_ftcontrol,on_speedl_for_handguide,on_speedl_for_move,on_speedl_for_insertpart,on_speedl_for_depthcompensation,on_speedl_for_center,on_speedl_for_gecko])
  return speedl_integer
  end 
  def on_speedl_start_for(speedl_id):
  if(speedl_id==ON_SPEEDL_FTCONTROL):
  on_speedl_for_ftcontrol=True
  elif(speedl_id==ON_SPEEDL_HANDGUIDE):
  on_speedl_for_handguide=True
  elif(speedl_id==ON_SPEEDL_TRAJECTORY):
  on_speedl_for_move=True
  elif(speedl_id==ON_SPEEDL_INSERTPART):
  on_speedl_for_insertpart=True
  elif(speedl_id==ON_SPEEDL_DEPTHCOMP):
  on_speedl_for_depthcompensation=True
  elif(speedl_id==ON_SPEEDL_CENTER):
  on_speedl_for_center=True
  elif(speedl_id==ON_SPEEDL_GECKO):
  on_speedl_for_gecko=True
  else:
  textmsg("Unknown Start speedl ID received: ",speedl_id)
  end 
  local speedl_integer=on_speedl_integer_get()
  if not(speedl_integer==0):
  if not on_speedl_is_running:
  on_speedl_thread_handler=run on_speedl_thread()
  end 
  end 
  return on_speedl_is_running
  end 
  def on_speedl_stop_for(speedl_id,brake=10,brakeRot=10):
  if(speedl_id==ON_SPEEDL_FTCONTROL):
  on_speedl_for_ftcontrol=False
  elif(speedl_id==ON_SPEEDL_HANDGUIDE):
  on_speedl_for_handguide=False
  elif(speedl_id==ON_SPEEDL_TRAJECTORY):
  on_speedl_for_move=False
  elif(speedl_id==ON_SPEEDL_INSERTPART):
  on_speedl_for_insertpart=False
  elif(speedl_id==ON_SPEEDL_DEPTHCOMP):
  on_speedl_for_depthcompensation=False
  elif(speedl_id==ON_SPEEDL_CENTER):
  on_speedl_for_center=False
  elif(speedl_id==ON_SPEEDL_GECKO):
  on_speedl_for_gecko=False
  on_speedGecko_set(ON_ZERO6D)
  else:
  textmsg("Unknown Stop speedl ID received: ",speedl_id)
  end 
  local speedl_integer=on_speedl_integer_get()
  if(speedl_integer==0):
  if(on_speedl_is_running):
  kill on_speedl_thread_handler
  enter_critical
  on_speedl_is_running=False
  exit_critical
  
  end 
  if ON_DEBUG_LOG:
  textmsg("Speedl thread stopped")
  end 
  stopl(brake,brakeRot)
  end 
  return on_speedl_is_running
  end 
  def on_speedl_pause():
  on_speedl_is_enabled=False
  return on_speedl_integer_get()
  end 
  def on_speedl_resume():
  on_speedl_is_enabled=True
  return on_speedl_integer_get()
  end 
  
  #======    End of OnRobot  Speedl    ======#
  #======    OnRobot VG Engine Messages    ======#
  
  vg_error_title="OnRobot - VG error"
  vg_device_id_waiting="Waiting for valid OnRobot VG ID..."
  vg_device_id_timeout="Waiting for valid OnRobot VG ID timed out.<br>Program halted."
  vg_status_error_title="OnRobot - VG Status error"
  vg_status_error_missing="Communication problem with a VG gripper. Please check the device.<br>Program halted."
  
  #======    End of OnRobot VG Engine Messages    ======#
  #======    OnRobot VG Engine    ======#
  
  vg_dataProcess_running=False
  def vg_dataProcess():
  enter_critical
  local index=0
  while index<3:
  vg_Vacuum_AB_arr[2*index+0]=vg_Vacuum_A_arr[index]
  vg_Vacuum_AB_arr[2*index+1]=vg_Vacuum_B_arr[index]
  index=index+1
  end 
  local tool_index=vg_index
  if tool_index==ON_DI_DUAL:
  vg_Vacuum_A_primary=vg_Vacuum_A_arr[ON_DI_PRIMARY]
  vg_Vacuum_B_primary=vg_Vacuum_B_arr[ON_DI_PRIMARY]
  vg_Vacuum_A_secondary=vg_Vacuum_A_arr[ON_DI_SECONDARY]
  vg_Vacuum_B_secondary=vg_Vacuum_B_arr[ON_DI_SECONDARY]
  else:
  vg_Vacuum_A=vg_Vacuum_A_arr[tool_index]
  vg_Vacuum_B=vg_Vacuum_B_arr[tool_index]
  end 
  vg_glob_time=vg_glob_time+vg_step_time
  exit_critical
  end 
  def vg_dataProcess_status_errors(vg_stop=False):
  enter_critical
  local tool_index=vg_index
  if(tool_index==ON_DI_DUAL):
  tool_index=ON_DI_SECONDARY
  vg_stop=on_error((vg_device_id_arr[tool_index]!=tool_index),vg_status_error_missing,vg_status_error_title,vg_stop)
  vg_stop=on_error((vg_product_code_arr[tool_index]==ON_DEVICE_ID_MISSING),vg_status_error_missing,vg_status_error_title,vg_stop)
  tool_index=ON_DI_PRIMARY
  end 
  vg_stop=on_error((vg_device_id_arr[tool_index]!=tool_index),vg_status_error_missing,vg_status_error_title,vg_stop)
  vg_stop=on_error((vg_product_code_arr[tool_index]==ON_DEVICE_ID_MISSING),vg_status_error_missing,vg_status_error_title,vg_stop)
  exit_critical
  return vg_stop
  end 
  thread vg_dataProcess_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting dataProcess thread")
  end 
  while vg_dataProcess_running:
  sync()
  local vg_stop=False
  vg_stop=vg_dataProcess_status_errors(vg_stop)
  if vg_stop:
  halt
  end 
  vg_dataProcess()
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping VG dataProcess thread")
  end 
  end 
  def vg_index_get():
  return vg_index
  end 
  
  #======    End of OnRobot VG Engine    ======#
  textmsg(on_devices_primary_log, ": Quick Changer + VGC10 + [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]")
  on_install_tcp = True
  on_follow_tcp = True
  on_tcp_active_is_primary = True
  on_tcp_vision_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_cog_vision_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_mass_vision_primary = 0.0
  on_tcp_qc_primary = p[0.0, 0.0, 0.0136, 0.0, 0.0, 0.0]
  on_cog_qc_primary = p[0.0, 0.0, 0.004, 0.0, 0.0, 0.0]
  on_mass_qc_primary = 0.06
  on_tcp_gripper_static_primary = p[0.0, 0.0, 0.100, 0.0, 0.0, 0.0]
  on_cog_gripper_primary = p[-0.001, -0.001, 0.040, 0.0, 0.0, 0.0]
  on_mass_gripper_primary = 0.855
  on_tcp_tool_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_cog_tool_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_mass_tool_primary = 0.0
  #======    OnRobot VG Idle Messages    ======#
  
  vg_idle_message_title="OnRobot - VG Idle"
  vg_idle_error_command_not_supported="vg_idle: this script function is no longer supported<br>Program halted."
  
  #======    End of OnRobot VG Idle Messages    ======#
  #======    OnRobot VG Release    ======#
  
  def vg10_idle(channel,tool_index=0):
  vg_idle(channel,tool_index)
  end 
  def vg_idle(channel,tool_index=0):
  popup(vg_idle_error_command_not_supported,title=vg_idle_message_title,error=True,blocking=False)
  halt
  end 
  
  #======    End of OnRobot VG Release    ======#
  #======    OnRobot VG Grip Messages    ======#
  
  vg_grip_message_title="OnRobot - VG Grip"
  vg_grip_delayed_init_fail="Failed to initialize delayed VG Grip.<br>Program halted."
  vg_grip_delayed_start_fail="Failed to start delayed VG Grip.<br>Program halted."
  vg_grip_bad_arg_channel="vg_grip argument error : Please select channel 0, 1 or 2"
  vg_grip_bad_arg_vacuum="vg_grip : Vacuum should be between 0 and 80"
  vg_grip_error_command="Could not send grip command<br>Please check connection.<br>Program halted."
  vg_grip_could_not_reach_vacuum="Could not reach requested vacuum.<br>Please check robot/workpiece alignment and suction cups.<br>Program halted."
  vg_grip_no_part="No part found while seeking."
  
  #======    End of OnRobot VG Grip Messages    ======#
  #======    OnRobot VG Grip    ======#
  
  VG_GRIP_DELEAYED_STATUS_IDLE=0
  VG_GRIP_DELEAYED_STATUS_INIT=1
  VG_GRIP_DELEAYED_STATUS_START=2
  vg_grip_delay=0
  vg_grip_delayed_channel=2
  vg_grip_delayed_vacuum=60
  vg_grip_delayed_timeout=3.0
  vg_grip_delayed_alert=True
  vg_grip_delayed_mass=0
  vg_grip_delayed_status=0
  vg_grip_delayed_tool_index=0
  vg_grip_delayed_thread_handler=[0,0,0]
  def vg10_grip(channel=2,vacuum=60,timeout=3.0,alert=True,tool_index=0):
  vg_grip(channel,vacuum,timeout,alert,tool_index)
  end 
  thread vg_grip_delayed_thread():
  local waitCntr=0
  while(vg_grip_delayed_status!=VG_GRIP_DELEAYED_STATUS_INIT):
  sync()
  if(waitCntr<10):
  popup(vg_grip_delayed_start_fail,title=vg_grip_message_title,warning=True,blocking=True)
  halt
  else:
  waitCntr=waitCntr+1
  end 
  end 
  vg_grip_delayed_status=VG_GRIP_DELEAYED_STATUS_START
  enter_critical
  local delay=vg_grip_delay
  local tool_index=vg_grip_delayed_tool_index
  local channel=vg_grip_delayed_channel
  local vacuum=vg_grip_delayed_vacuum
  local timeout=vg_grip_delayed_timeout
  local alert=vg_grip_delayed_alert
  local mass=vg_grip_delayed_mass
  exit_critical
  vg_grip_delayed_status=VG_GRIP_DELEAYED_STATUS_IDLE
  local sleepTime=0.01
  while(delay>0):
  sleep(sleepTime)
  delay=delay-sleepTime
  end 
  on_return=vg_grip(channel,vacuum,timeout,alert,tool_index)
  vg_payload_set(mass,channel,tool_index)
  end 
  def vg_grip_delayed(tool_index=0,channel=2,vacuum=60,timeout=3.0,alert=True,delay=0,mass=0):
  if(delay>0):
  sync()
  local waitCntr=0
  while(vg_grip_delayed_status!=VG_GRIP_DELEAYED_STATUS_IDLE):
  sync()
  if(waitCntr<10):
  popup(vg_grip_delayed_init_fail,title=vg_grip_message_title,warning=True,blocking=True)
  halt
  else:
  waitCntr=waitCntr+1
  end 
  end
  vg_grip_delayed_status=VG_GRIP_DELEAYED_STATUS_START
  enter_critical
  vg_grip_delay=delay
  vg_grip_delayed_tool_index=tool_index
  vg_grip_delayed_channel=channel
  vg_grip_delayed_vacuum=vacuum
  vg_grip_delayed_timeout=timeout
  vg_grip_delayed_alert=alert
  vg_grip_delayed_mass=mass
  exit_critical
  vg_grip_delayed_status=VG_GRIP_DELEAYED_STATUS_INIT
  vg_grip_delayed_thread_handler[tool_index]=run vg_grip_delayed_thread()
  sync()
  else:
  on_return=vg_grip(channel,vacuum,timeout,alert,tool_index)
  vg_payload_set(mass,channel,tool_index)
  end
  end 
  def vg_grip(channel=2,vacuum=60,timeout=3.0,alert=True,tool_index=0):
  retVal=0
  if channel<0 or channel>2:
  popup(vg_grip_bad_arg_channel,error=True)
  retVal=-99
  end 
  if vacuum<0 or vacuum>80:
  popup(vg_grip_bad_arg_vacuum,error=True)
  retVal=-99
  end 
  if retVal!=0:
  halt
  end 
  if(tool_index==ON_DI_SECONDARY):
  local isPrimary=False
  else:
  local isPrimary=True
  end 
  if(on_follow_tcp):
  on_tcp_set_actual_to(isPrimary)
  end 
  vg_enabled_arr[tool_index]=True
  local err=on_xmlrpc.vg10_grip(tool_index,channel,vacuum*1.0)
  if err<0:
  popup(vg_grip_error_command,title=vg_grip_message_title,error=True,blocking=False)
  halt
  end 
  if timeout>0.0:
  vg_glob_time=0.0
  while(((channel==0 or channel==2)and vg_Vacuum_A_arr[tool_index]<vacuum)or((channel==1 or channel==2)and vg_Vacuum_B_arr[tool_index]<vacuum)):
  if vg_glob_time>timeout:
  popup(vg_grip_could_not_reach_vacuum,title=vg_grip_message_title,error=True,blocking=False)
  vg_release(channel,tool_index=tool_index)
  halt
  end 
  sync()
  end 
  else:
  alert=False
  end 
  if channel==0 or channel==2:
  vg_vacuum_guard_arr[0+2*tool_index]=alert
  end 
  if channel==1 or channel==2:
  vg_vacuum_guard_arr[1+2*tool_index]=alert
  end 
  if(on_follow_tcp):
  on_tcp_update(isPrimary)
  end 
  return retVal
  end 
  
  
  def vg_seek(tool_index):
  local retVal=0
  zero_ftsensor()
  if(on_follow_tcp):
  if(tool_index==ON_DI_SECONDARY):
  local isPrimary=False
  else:
  local isPrimary=True
  end 
  on_tcp_set_actual_to(isPrimary)
  end 
  local actual_tcp=on_get_tcp_for(tool_index)
  local p0=pose_trans(get_actual_tool_flange_pose(),actual_tcp)
  force_mode(p0,[0,0,1,0,0,0],[0,0,10,0,0,0],2,[1,1,0.1,d2r(10),d2r(10),1])
  sleep(0.10)
  while True:
  v=get_actual_tcp_speed()
  if(norm([v[0],v[1],v[2]])<0.003)and(norm([v[3],v[4],v[5]])<0.005):
  end_force_mode()
  break
  else:
  local p1=pose_trans(get_actual_tool_flange_pose(),actual_tcp)
  if(point_dist(p0,p1)>0.1):
  end_force_mode()
  popup(vg_grip_no_part,title=vg_grip_message_title,warning=True,blocking=True)
  retVal=1
  break
  else:
  sync()
  end 
  end 
  end 
  return retVal
  end 
  
  
  
  #======    End of OnRobot VG Grip    ======#
  #======    OnRobot VG Release Messages    ======#
  
  vg_release_message_title="OnRobot - VG Release"
  vg_release_bad_channel="vg_release : Please select channel 0, 1 or 2"
  vg_release_command_error="Could not send release command. Please check connection.<br>Program halted."
  vg_release_failed="Could not perform release. Please check power.<br>Program halted."
  vg_release_autoidle_not_supported="vg_release: using autoidle=True is no longer supported"
  
  #======    End of OnRobot VG Release Messages    ======#
  #======    OnRobot VG Release    ======#
  
  VG_BACK_AWAY_SPEED=0.025
  VG_BACK_AWAY_ACC=1.2
  def vg10_release(channel,timeout=0.0,autoidle=False,tool_index=0):
  vg_release(channel,timeout,autoidle,tool_index)
  end 
  def vg_release(channel,timeout=0.0,autoidle=False,tool_index=0):
  if channel<0 or channel>2:
  popup(vg_release_bad_channel,title=vg_release_message_title,error=True,blocking=False)
  halt
  end 
  if autoidle:
  popup(vg_release_autoidle_not_supported,title=vg_release_message_title,error=True,blocking=False)
  halt
  end 
  if(tool_index==ON_DI_SECONDARY):
  local isPrimary=False
  else:
  local isPrimary=True
  end 
  if(on_follow_tcp):
  on_tcp_set_actual_to(isPrimary)
  end 
  vg_enabled_arr[tool_index]=True
  if channel==0 or channel==2:
  vg_vacuum_guard_arr[0+2*tool_index]=False
  end 
  if channel==1 or channel==2:
  vg_vacuum_guard_arr[1+2*tool_index]=False
  end 
  local release_A=channel==0 or channel==2
  local release_B=channel==1 or channel==2
  local err=on_xmlrpc.vg10_release(tool_index,release_A,release_B)
  if err<0:
  popup(vg_release_command_error,title=vg_release_message_title,error=True,blocking=False)
  halt
  else:
  if timeout>0.0:
  vg_glob_time=0.0
  while(((channel==0 or channel==2)and vg_Vacuum_A_arr[tool_index]>1)or((channel==1 or channel==2)and vg_Vacuum_B_arr[tool_index]>1)):
  if vg_glob_time>timeout:
  popup(vg_release_failed,title=vg_release_message_title,error=True,blocking=False)
  halt
  end 
  sync()
  end 
  end 
  end 
  if(on_follow_tcp):
  on_tcp_update(isPrimary)
  end 
  return 0
  end 
  def vg_backoff(tool_index,distance=0.015):
  if(tool_index==ON_DI_SECONDARY):
  local isPrimary=False
  local actual_tcp=on_tcp_static_secondary
  else:
  local isPrimary=True
  local actual_tcp=on_tcp_static_primary
  end 
  if(on_follow_tcp):
  on_tcp_set_actual_to(isPrimary)
  end 
  local t_w_tool=pose_trans(get_actual_tool_flange_pose(),actual_tcp)
  local t_tool_w=pose_inv(t_w_tool)
  local start_pose=get_forward_kin()
  local target_pose=pose_add(start_pose,pose_trans(pose_trans(t_w_tool,p[0,0,-distance,0,0,0]),t_tool_w))
  movel(target_pose,a=VG_BACK_AWAY_ACC,v=VG_BACK_AWAY_SPEED)
  if(on_follow_tcp):
  on_tcp_update(isPrimary)
  end 
  end 
  
  #======    End of OnRobot VG Release    ======#
  #======    OnRobot VG Monitor Messages    ======#
  
  vg_monitor_error_title="OnRobot - VG"
  vg_monitor_error_leakage="Air leakage detected on workpiece.<br>Try to improve robot/workpiece alignment, add more suction cups or adjust vacuum setting.<br>Program halted."
  
  #======    End of OnRobot VG Monitor Messages    ======#
  #======    OnRobot VG Monitor    ======#
  
  thread vg_monitor_thread():
  while True:
  sync()
  local vg_error=False
  if(vg_index==ON_DI_DUAL):
  local tool_index=ON_DI_SECONDARY
  vg_error=vg_monitor_check(tool_index)
  local tool_index=ON_DI_PRIMARY
  else:
  local tool_index=vg_index
  end 
  vg_error=vg_error or vg_monitor_check(tool_index)
  if vg_error:
  halt
  end 
  end 
  end 
  def vg_monitor_check(tool_index=0):
  local error=False
  local channel_index=0
  while(channel_index<2):
  local channel_arr_index=2*tool_index+channel_index
  if vg_vacuum_guard_arr[channel_arr_index]and vg_Vacuum_AB_arr[channel_arr_index]<1:
  popup(vg_monitor_error_leakage,title=vg_monitor_error_title,error=True,blocking=False)
  vg_release(channel_index,tool_index=tool_index)
  vg_payload_set(0,channel_index,tool_index=tool_index)
  error=True
  end 
  channel_index=channel_index+1
  end 
  return error
  end 
  
  #======    End of OnRobot VG Monitor    ======#
  #======    OnRobot Run    ======#
  
  textmsg(on_xmlrpc_start_ip,on_device_ip)
  on_portopen_javaSocket()
  sync()
  on_rtde_feed_open()
  sync()
  on_set_rtde_watchdog(updateHz=0.2)
  sync()
  on_dataProcess_thrd=run on_dataProcess_thread()
  sync()
  on_tcp_init_primary()
  on_payload_init_primary()
  
  on_tcp_set_actual_to(on_tcp_active_is_primary)
  if(on_follow_tcp):
  on_payload_set_actual()
  end 
  on_watchdog_thrd=run on_set_watchdog_thread()
  sync()
  
  #======    End of OnRobot Run    ======#
  #======    OnRobot QC Start    ======#
  
  if(on_toolConnector):
  tc_setup_tool()
  end 
  sync()
  
  #======    End of OnRobot QC Start    ======#
  #======    OnRobot CB Run    ======#
  
  if(ON_REGISTERS_SPEEDL_INT>0):
  cb_dataRead_thrd=run cb_dataRead_thread()
  sync()
  end 
  
  #======    End of OnRobot CB Run    ======#
  #======    OnRobot VG Run    ======#
  
  def vg_wait_for_init(tool_index):
  local vg_timeout=0
  while not(vg_product_code_arr[tool_index]==VG_DEVICE_ID_VG10 or vg_product_code_arr[tool_index]==VG_DEVICE_ID_VGC10):
  sync()
  vg_timeout=vg_timeout+1
  if(vg_timeout>ON_INIT_TIMEOUT):
  popup(vg_device_id_timeout,vg_error_title,error=True,blocking=False)
  halt
  end 
  end 
  if ON_DEBUG_LOG:
  textmsg("Identified VG: ",vg_product_code_arr[tool_index])
  end 
  end 
  vg_dataRead_running=True
  sync()
  vg_dataRead_thrd=run vg_dataRead_thread()
  sync()
  textmsg(vg_device_id_waiting)
  if(vg_index==ON_DI_DUAL):
  vg_wait_for_init(ON_DI_PRIMARY)
  vg_wait_for_init(ON_DI_SECONDARY)
  else:
  vg_wait_for_init(vg_index)
  end 
  vg_dataProcess_running=True
  sync()
  vg_dataProcess_thrd=run vg_dataProcess_thread()
  sync()
  vg_monitor_thread_handle=run vg_monitor_thread()
  sync()
  
  #======    End of OnRobot VG Run    ======#
  # end: URCap Installation Node
  global Waypoint_1_p=p[.002813806345, -.389968044517, .017765905115, -2.885268128672, -1.214852735214, -.002225146005]
  global Waypoint_1_q=[-1.2169774214373987, -1.7719441852965296, -2.4520115852355957, -0.5006914895823975, 1.5677094459533691, -3.581900183354513]
  global Waypoint_2_p=p[.002820755397, -.632109048608, .017753308650, -2.885258054833, -1.214825577772, -.002288122138]
  global Waypoint_2_q=[-1.354107681904928, -2.1810556850829066, -1.748862385749817, -0.7947850984385987, 1.566041350364685, -3.7195380369769495]
  global Waypoint_4_p=p[.002832355351, -.389973180620, .452140105533, -2.885194433216, -1.214923204358, -.002242036872]
  global Waypoint_4_q=[-1.217707935963766, -1.3041827541640778, -1.5950753688812256, -1.8254252872862757, 1.5704694986343384, -3.579554859791891]
  global Waypoint_3_p=p[.330658227183, -.390809236349, .017849214903, -2.885277152561, -1.214977676763, -.002239583802]
  global Waypoint_3_q=[-0.6092365423785608, -1.980755468408102, -2.1143627166748047, -0.6269533795169373, 1.5736364126205444, -2.974569861088888]
  global Waypoint_5_p=p[.002809494877, -.389963623154, .017760077037, -3.110586407964, .371497381062, -.010390472311]
  global Waypoint_5_q=[-1.222198788319723, -1.772876878777975, -2.4540047645568848, -0.49163396776232915, 1.5766948461532593, -2.5524047056781214]
  global Waypoint_6_p=p[.002817744126, -.389957355080, .410088866153, -2.885252613056, -1.214884040831, -.002232299404]
  global Waypoint_6_q=[-1.2179034391986292, -1.2853952509215851, -1.7173951864242554, -1.7218548260130824, 1.5702810287475586, -3.579733673726217]
  global Waypoint_7_p=p[-.195932840119, -.467311946613, .623185163551, -2.002707384803, -.859097603182, 2.173631073451]
  global Waypoint_7_q=[-1.2178624312030237, -1.2853674453547974, -1.7173547744750977, -1.721835275689596, 2.088546534650959E-5, -3.5797341505633753]
  global Waypoint_8_p=p[-.195945773925, -.467307967237, .623168496696, 2.029425587873, .382290504146, -2.030892981463]
  global Waypoint_8_q=[-1.2178915182696741, -1.2853676241687317, -1.7173879146575928, -1.7219072781004847, -1.1269246236622621E-5, -3.141587559376852]
  global Waypoint_9_p=p[.004450529999, -.394852969176, .836582757301, -.001286574584, .018857244424, -2.782568474755]
  global Waypoint_9_q=[-1.2179234663592737, -1.2853433650783082, -1.717322587966919, -1.721818586389059, -1.5708158651935022, -3.141531292592184]
  global Waypoint_10_p=p[-.195136982525, .343291649916, .836575499692, -.013101490545, -.004343909628, .864505357914]
  global Waypoint_10_q=[-3.8538969198810022, -1.2853313249400635, -1.717347264289856, -1.7218147716917933, -1.5708039442645472, -3.141599957142965]
  global Waypoint_11_p=p[-.132053037899, -.492907262143, .374127222275, 3.140355900473, .008478586275, .003672918208]
  global Waypoint_11_q=[-1.5707772413836878, -1.5707237343779816, -1.5708476305007935, -1.5708033047118128, 1.5707333087921143, -3.141655985509054]
  global Waypoint_13_p=p[-.132025889726, -.492922294855, .374145733125, -2.657503737799, -.006422888379, -.004921585288]
  global Waypoint_13_q=[-1.570174519215719, -1.8393017254271449, -1.2068511247634888, -2.151516099969381, 1.572676658630371, -3.140923563634054]
  global Waypoint_12_p=p[-.132028527226, -.492937314641, .374113312335, 2.213622244465, 2.225622089091, .001325468870]
  global Waypoint_12_q=[-1.5707572142230433, -1.570792991995706, -1.5708115100860596, -1.5707792681499377, 1.570802092552185, -4.712439004574911]
  global Waypoint_16_p=p[-.125139621866, -.487308567239, .399989752050, 3.140426942512, .008288958195, .003645680156]
  global Waypoint_16_q=[-1.5565183798419397, -1.5552487655407568, -1.520249843597412, -1.6369129619994105, 1.5708657503128052, -3.127181355153219]
  global Waypoint_14_p=p[-.125123609841, -.487317020775, .399993930441, .005018661888, .001772110612, -3.136382355506]
  global Waypoint_14_q=[-1.5541661421405237, -2.071681161920065, -2.161909818649292, -0.47869010389361577, -1.5718863646136683, -3.1550186316119593]
  global Waypoint_17_p=p[-.131903724534, -.409398374942, .236982905201, 3.140362559623, .008571156529, .003150578262]
  global Waypoint_17_q=[-1.5707533995257776, -1.4283725631288071, -2.0585944652557373, -1.225414590244629, 1.5700490474700928, -3.1418164412127894]
  global Waypoint_15_p=p[-.131906620854, -.409398928278, .236983091545, -1.522732695272, -.002471903338, -.005855169496]
  global Waypoint_15_q=[-1.569604221974508, -2.260125299493307, -1.3117988109588623, -2.760512968102926, 1.5755988359451294, -3.1418948809253138]
  global Waypoint_18_p=p[-.131895650684, -.409385198593, .236971465599, 2.786776990369, .006766071734, 1.442538755070]
  global Waypoint_18_q=[-1.9508879820453089, -1.6997138462462367, -1.9119038581848145, -1.5777865848936976, 2.430361270904541, -3.744052235280172]
  global Waypoint_19_p=p[-.133582777747, -.177457592051, .491728501339, -1.551247938449, -.006200252586, .000173308539]
  global Waypoint_19_q=[-1.5707610289203089, -1.5707005585539555, -1.5708434581756592, -3.162389417687887, 1.5706804990768433, -3.14166766801943]
  global Waypoint_20_p=p[-.221951827979, -.584172586361, .482939769644, -.435747699771, -2.003908074585, 1.958655312681]
  global Waypoint_20_q=[-1.5707653204547327, -1.5707126115633692, -1.570847749710083, -3.1624337635436, -1.1332867781268519, -3.1416192690478724]
  global Waypoint_21_p=p[-.032533593316, -.808646442696, .011060822503, 3.140339977407, .008379386451, .003723901372]
  global Waypoint_21_q=[-1.4455555121051233, -2.5351926289000453, -1.0832152366638184, -1.0936729174903412, 1.5692564249038696, -3.019785229359762]
  global Waypoint_22_p=p[-.032514770186, -.912044711086, .155568701323, 1.558028671214, .006031541512, -.002476974096]
  global Waypoint_22_q=[-1.4248054663287562, -2.7717906437315882, -1.10362708568573, 0.7458280759998779, 1.4278208017349243, -3.151057545338766]
  global Waypoint_23_p=p[.801766084895, -.110113261342, .011047959266, -2.319615052159, -2.117646407622, -.004075961649]
  global Waypoint_23_q=[0.028957843780517578, -2.535201211968893, -1.0832276344299316, -1.093677507047989, 1.5692962408065796, -3.019761387501852]
  global Waypoint_24_p=p[.915405254358, -.107936247182, .323230153633, 1.291634229904, 1.172991168118, 1.317969574995]
  global Waypoint_24_q=[0.028969764709472656, -2.5351888142027796, -1.083211064338684, 0.4711293417164306, 1.5692322254180908, -3.0197935740100306]
  global Waypoint_25_p=p[-.808267959864, .041036559529, .011055372665, 2.213846121492, -2.225373020180, .001231711600]
  global Waypoint_25_q=[-3.0268736521350306, -2.535213132897848, -1.0831953287124634, -1.0936531883529206, 1.5692683458328247, -3.0197773615466517]
  global Waypoint_26_p=p[-.923314473709, .028875271045, .318693859969, 1.193075382068, -1.205467529016, -1.021905318634]
  global Waypoint_26_q=[-3.0268741289721888, -2.535168310204977, -1.083211064338684, 0.4499305921741943, 1.5692963600158691, -3.0197411219226282]
  global Waypoint_27_p=p[-.067316227976, .806506455716, .011066781668, .201972535708, -3.132634285176, -.001764630479]
  global Waypoint_27_q=[-4.463667337094442, -2.535196920434469, -1.0831996202468872, -1.093649224644043, 1.5692601203918457, -3.0197370688067835]
  global Waypoint_28_p=p[-.095060251500, .920192349117, .315584558823, .129713202711, -2.093470884414, -1.980411878168]
  global Waypoint_28_q=[-4.463691298161642, -2.5351721249022425, -1.083187222480774, 0.4355267721363525, 1.5692962408065796, -3.019785467778341]
  while (True):
    $ 2 "Robot Program"
    $ 3 "axis_aligned"
    $ 4 "MoveL"
    $ 5 "Waypoint_1" "breakAfter"
    movel(Waypoint_1_p, a=1.2, v=0.25)
    $ 6 "Waypoint_2" "breakAfter"
    movel(Waypoint_2_p, a=1.2, v=0.25)
    $ 7 "Waypoint_1" "breakAfter"
    movel(Waypoint_1_p, a=1.2, v=0.25)
    $ 8 "MoveL"
    $ 9 "Waypoint_4" "breakAfter"
    movel(Waypoint_4_p, a=1.2, v=0.25)
    $ 10 "Waypoint_1" "breakAfter"
    movel(Waypoint_1_p, a=1.2, v=0.25)
    $ 11 "MoveL"
    $ 12 "Waypoint_3" "breakAfter"
    movel(Waypoint_3_p, a=1.2, v=0.25)
    $ 13 "Waypoint_1" "breakAfter"
    movel(Waypoint_1_p, a=1.2, v=0.25)
    $ 14 "MoveL"
    $ 15 "Waypoint_5" "breakAfter"
    movel(Waypoint_5_p, a=1.2, v=0.25)
    $ 16 "Waypoint_1" "breakAfter"
    movel(Waypoint_1_p, a=1.2, v=0.25)
    $ 17 "MoveJ"
    $ 18 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 19 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 20 "Waypoint_8" "breakAfter"
    movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 21 "Waypoint_9" "breakAfter"
    movej(get_inverse_kin(Waypoint_9_p, qnear=Waypoint_9_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 22 "Waypoint_1" "breakAfter"
    movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 23 "MoveJ"
    $ 24 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 25 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 26 "Waypoint_8" "breakAfter"
    movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 27 "Waypoint_9" "breakAfter"
    movej(get_inverse_kin(Waypoint_9_p, qnear=Waypoint_9_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 28 "Waypoint_10" "breakAfter"
    movej(get_inverse_kin(Waypoint_10_p, qnear=Waypoint_10_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 29 "Waypoint_1" "breakAfter"
    movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 30 "Joint_aligned"
    $ 31 "MoveJ"
    $ 32 "Waypoint_11" "breakAfter"
    movej(get_inverse_kin(Waypoint_11_p, qnear=Waypoint_11_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 33 "MoveJ"
    $ 34 "Waypoint_13" "breakAfter"
    movej(get_inverse_kin(Waypoint_13_p, qnear=Waypoint_13_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 35 "Waypoint_11" "breakAfter"
    movej(get_inverse_kin(Waypoint_11_p, qnear=Waypoint_11_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 36 "MoveJ"
    $ 37 "Waypoint_12" "breakAfter"
    movej(get_inverse_kin(Waypoint_12_p, qnear=Waypoint_12_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 38 "Waypoint_11" "breakAfter"
    movej(get_inverse_kin(Waypoint_11_p, qnear=Waypoint_11_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 39 "MoveL"
    $ 40 "Waypoint_16" "breakAfter"
    movel(Waypoint_16_p, a=1.2, v=0.25)
    $ 41 "Waypoint_14" "breakAfter"
    movel(Waypoint_14_p, a=1.2, v=0.25)
    $ 42 "Waypoint_11" "breakAfter"
    movel(Waypoint_11_p, a=1.2, v=0.25)
    $ 43 "MoveL"
    $ 44 "Waypoint_17" "breakAfter"
    movel(Waypoint_17_p, a=1.2, v=0.25)
    $ 45 "Waypoint_15" "breakAfter"
    movel(Waypoint_15_p, a=1.2, v=0.25)
    $ 46 "Waypoint_17" "breakAfter"
    movel(Waypoint_17_p, a=1.2, v=0.25)
    $ 47 "Waypoint_18" "breakAfter"
    movel(Waypoint_18_p, a=1.2, v=0.25)
    $ 48 "Waypoint_17" "breakAfter"
    movel(Waypoint_17_p, a=1.2, v=0.25)
    $ 49 "MoveJ"
    $ 50 "Waypoint_11" "breakAfter"
    movej(get_inverse_kin(Waypoint_11_p, qnear=Waypoint_11_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 51 "Waypoint_19" "breakAfter"
    movej(get_inverse_kin(Waypoint_19_p, qnear=Waypoint_19_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 52 "Waypoint_20" "breakAfter"
    movej(get_inverse_kin(Waypoint_20_p, qnear=Waypoint_20_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 53 "Waypoint_11" "breakAfter"
    movej(get_inverse_kin(Waypoint_11_p, qnear=Waypoint_11_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 54 "Extremes"
    $ 55 "MoveJ"
    $ 56 "Waypoint_21" "breakAfter"
    movej(get_inverse_kin(Waypoint_21_p, qnear=Waypoint_21_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 57 "Waypoint_22" "breakAfter"
    movej(get_inverse_kin(Waypoint_22_p, qnear=Waypoint_22_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 58 "Waypoint_21" "breakAfter"
    movej(get_inverse_kin(Waypoint_21_p, qnear=Waypoint_21_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 59 "MoveJ"
    $ 60 "Waypoint_23" "breakAfter"
    movej(get_inverse_kin(Waypoint_23_p, qnear=Waypoint_23_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 61 "Waypoint_24" "breakAfter"
    movej(get_inverse_kin(Waypoint_24_p, qnear=Waypoint_24_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 62 "Waypoint_23" "breakAfter"
    movej(get_inverse_kin(Waypoint_23_p, qnear=Waypoint_23_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 63 "Waypoint_21" "breakAfter"
    movej(get_inverse_kin(Waypoint_21_p, qnear=Waypoint_21_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 64 "MoveJ"
    $ 65 "Waypoint_25" "breakAfter"
    movej(get_inverse_kin(Waypoint_25_p, qnear=Waypoint_25_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 66 "Waypoint_26" "breakAfter"
    movej(get_inverse_kin(Waypoint_26_p, qnear=Waypoint_26_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 67 "Waypoint_25" "breakAfter"
    movej(get_inverse_kin(Waypoint_25_p, qnear=Waypoint_25_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 68 "MoveJ"
    $ 69 "Waypoint_27" "breakAfter"
    movej(get_inverse_kin(Waypoint_27_p, qnear=Waypoint_27_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 70 "Waypoint_28" "breakAfter"
    movej(get_inverse_kin(Waypoint_28_p, qnear=Waypoint_28_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 71 "Waypoint_27" "breakAfter"
    movej(get_inverse_kin(Waypoint_27_p, qnear=Waypoint_27_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 72 "Waypoint_25" "breakAfter"
    movej(get_inverse_kin(Waypoint_25_p, qnear=Waypoint_25_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 73 "Waypoint_21" "breakAfter"
    movej(get_inverse_kin(Waypoint_21_p, qnear=Waypoint_21_q), a=1.3962634015954636, v=1.0471975511965976)
  end
end
