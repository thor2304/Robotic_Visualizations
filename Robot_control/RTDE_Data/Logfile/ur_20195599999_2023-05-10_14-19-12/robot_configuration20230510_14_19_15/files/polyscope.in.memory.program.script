def test_installation_with_script():
  global _hidden_verificationVariable=0
  step_count_228ee2b7_9bb1_4753_aa2b_7f9d3c9a27c5 = 0.0
  thread Step_Counter_Thread_075f042b_96bd_405e_b77f_1ee8bdd6e460():
    while (True):
      step_count_228ee2b7_9bb1_4753_aa2b_7f9d3c9a27c5 = step_count_228ee2b7_9bb1_4753_aa2b_7f9d3c9a27c5 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_075f042b_96bd_405e_b77f_1ee8bdd6e460()
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_gravity([0.0, 0.0, 9.82])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  set_target_payload(1.000000, [0.000000, 0.000000, 0.000000], [0.001539, 0.001539, 0.001539, 0.000000, 0.000000, 0.000000])
  while (True):
    $ 2 "Robot Program"
    $ 3 "Script: script_test.script"
    # Orient myself in the program loop by popup
    popup("Beginning a cycle", "Program start", False, False, True)
    
    global coordination_boolean_register = 64
    global x_coordinate_float_register = 24
    global y_coordinate_float_register = 25
    
    
    straight_down = rpy2rotvec([d2r(0), d2r(180), d2r(0)])
    straight_down_pose = p[0, 0, 0, straight_down[0], straight_down[1], straight_down[2]]
    
    # These variables will be added onto the corner of the edge of the pickup spot
    global x_range = [0, 0.2]
    global y_range = [0, 0.2]
    
    global travel_height = 0.2
    global pickup_height = 0.1
    
    home_pose = pose_add(p[-0.1, -0.3, travel_height, 0, 0, 0], straight_down_pose)
    pickup_corner_pose = pose_add(p[-0.1, -0.4, travel_height, 0, 0, 0], straight_down_pose)
    dropoff_pose = pose_add(p[-0.4, -0.2, travel_height, 0, 0, 0], straight_down_pose)
    
    
    # Helper functions
    def max(a, b):
        if b > a:
            return b
        end
    
        return a
    end
    
    def min(a, b):
        if b < a:
            return b
        end
    
        return a
    end
    
    def clamp_coordinate(coordinate, lower_limit=0, upper_limit=1):
    # Clamp the input to the limits provided in the array.
        return max(min(upper_limit, coordinate), lower_limit)
    end
    
    
    ## Camera Thread
    thread cameraThread():
        # Generate a random TCP
        # This will be interpreted as generating a "random" set of x,y coordinates that are within the bounds.
        # For his implementation, we will sample an array, in order.
    
        global counter = 0
        local index = 0
        local x_coords = [0.04, 0.12, 0.16]
        local y_coords = [0.2, 0.08, 0.04]
        local coords_length = min(length(x_coords), length(y_coords))
    
        # after initializing the values for this thread we want to infinitely loop
        # And in each loop we will wait for the signal to generate a TCP
        while True:
            # Wait for the signal from the robot
            while read_output_boolean_register(coordination_boolean_register) != False:
                sync()
            end
            # The robot is ready for another coordinate
            # generate a new coordinate
            generated_x = x_coords[index]
            generated_y = y_coords[index]
    
            index = (index + 1) % coords_length
            counter = counter + 1
    
            # Write the generated TCP to the registers read by the robot
            write_output_float_register(x_coordinate_float_register, generated_x)
            write_output_float_register(y_coordinate_float_register, generated_y)
    
            popup("The thread is ready to output the value", "Ready from Camera", False, False, True)
            # set_digital_out = 1
            enter_critical
            write_output_boolean_register(coordination_boolean_register, True)
            exit_critical
            sleep(0.1)
        end
    end
    
    # MAIN SCRIPT
    def my_main():
      # Move_to_home_pos
      # x,y,z
      # The coordinates of the tcp
      # z is the blue arrow
      # x is the red arrow
      # y is the green arrow
      movej(home_pose)
    
      # set_digital_out = 0
    
      write_output_boolean_register(coordination_boolean_register, False)
      sleep(0.1)
    
      popup("Will wait for boolean register", "Awaiting Camera", False, False, True)
    
      # Wait for external thread being ready
      # communicated by the boolean register
      while read_output_boolean_register(coordination_boolean_register) != True:
          sync()
      end
      # The thread is finished and we now continue
    
      popup("The value has been received", "Robot moving", False, False, True)
    
      # Read the coordinates of the upcoming pickup
      global received_x = read_output_float_register(x_coordinate_float_register)
      global received_y = read_output_float_register(y_coordinate_float_register)
      # Clamp the coordinates to avoid overshooting the target area
      received_x = clamp_coordinate(received_x, x_range[0], x_range[1])
      received_y = clamp_coordinate(received_y, y_range[0], y_range[1])
    
    
      # Move overtop the place to pickup
      # I think we should only receive an x and a y, and create the TCP ourselves
      pickup_pose = pickup_corner_pose
      pickup_pose[0] = pickup_pose[0] + received_x
      pickup_pose[1] = pickup_pose[1] + received_y
      movej(pickup_pose)
    
    
      # Go down to pick it up
      pickup_pose[2] = pickup_height
      movel(pickup_pose)
    
      # Close the tool
      # According to the E-learning track, the gripper is closed when the tool_out is high
      set_tool_digital_out(0, True)
      sleep(0.3)
    
    
      # Lift up to stand clear
      pickup_pose[2] = travel_height
      movel(pickup_pose)
    
      # Move to the final/dropoff position
      movej(dropoff_pose, r=0.1)
    
      dropoff_lowered = dropoff_pose
      dropoff_lowered[2] = pickup_height
      # Move straight down to drop off the item
      movel(dropoff_lowered)
    
      # Open the tool
      # According to the E-learning track, the gripper is closed when the tool_out is high
      # So the tool out should be set low to open
      set_tool_digital_out(0, False)
      sleep(0.2)
    
      # Move back up to be clear
      movel(dropoff_pose)
    
      # Wait 1 sec before continuing to next loop
      sleep(1)
    end
    
    # Running the entire program:
    extra_thread = run cameraThread()
    # The extra thread is run unce, and then the main program loops continuosly
    # If main does not have a continous loop, the entire script is restarted by PolyScope
    # Including the thread being restarted, which sometimes leads to double outputting and other weirdness
    while True:
      my_main()
    end
  end
end
